name: Build Production Docker Image
on:
  push:
    branches:
      - 'main'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set generated env vars
        id: build_number
        run: |
          echo ::set-output name=number::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --prefer-dist --no-dev

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.OSO_PROD_AWS_ACCOUNT_ID }}
          aws-secret-access-key: ${{ secrets.OSO_PROD_AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build NGINX
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./docker/app/nginx/Dockerfile
          region: eu-west-2
          tags: ${{ steps.build_number.outputs.number }}
        
      - name: Build PHP
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./docker/app/php/production/Dockerfile
          region: eu-west-2
          tags: ${{ steps.build_number.outputs.number }}
